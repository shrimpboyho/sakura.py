#ifndef SAKURA_H
#define SAKURA_H

#include <iostream>
#include <vector>

/* REGISTER STRUCT
 *	Holds multiple registers
 * */

typedef std::vector <std::string> TOKENS;
typedef std::vector <std::vector<std::string>> PROGRAM;
typedef struct reg{

	int a;
        int b;
        int c;
        int d;
        int t;

} REG;

class sakuraMachine{

        private:
                // Flag and program counter
                bool flag;
                int pc;
                
        	// Registers
		REG REGISTER;

                // Program represented in memory
                PROGRAM program;

		// Operation functions
		bool o_zero(char reg);
		bool o_lt(char a, char b);
		bool o_gt(char a, char b);
		bool o_eq(char a, char b);
		int o_add(char a, char b);
		int o_sub(char a, char b);

		// Instruction functions
		void i_copy(char a, char b);
		void i_load(char a, int b);
		void i_exec(char a, char op);
		void i_halt();
		void i_jump(int line);
		void i_branch(int line);
		void i_test(char op, TOKENS args);
				
        public:
        	// Pubic constructor
		sakuraMachine(PROGRAM p);

                // Public execution function
                int execute();

};

#endif /* SAKURA_H */
